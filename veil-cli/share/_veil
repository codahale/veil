#compdef veil

autoload -U is-at-least

_veil() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_veil_commands" \
"*::: :->veil-cli" \
&& ret=0
    case $state in
    (veil-cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:veil-command-$line[1]:"
        case $line[1] in
            (secret-key)
_arguments "${_arguments_options[@]}" \
'--time=[The time parameter for encryption]' \
'--space=[The space parameter for encryption]' \
'--passphrase-file=[The path to read the passphrase from]: :_files' \
'-h[Prints help information]' \
'--help[Prints help information]' \
':output -- The output path for the encrypted secret key:_files' \
&& ret=0
;;
(public-key)
_arguments "${_arguments_options[@]}" \
'--passphrase-file=[The path to read the passphrase from]: :_files' \
'-h[Prints help information]' \
'--help[Prints help information]' \
':secret-key -- The path of the encrypted secret key:_files' \
':key-id -- The ID of the generated public key:' \
&& ret=0
;;
(derive-key)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
':public-key -- The public key:' \
':sub-key-id -- The sub ID of the generated public key:' \
&& ret=0
;;
(encrypt)
_arguments "${_arguments_options[@]}" \
'--fakes=[Add fake recipients]' \
'--padding=[Add random bytes of padding]' \
'--passphrase-file=[The path to read the passphrase from]: :_files' \
'-h[Prints help information]' \
'--help[Prints help information]' \
':secret-key -- The path of the encrypted secret key:_files' \
':key-id -- The ID of the public key to use:' \
':plaintext -- The path to the input file:_files' \
':ciphertext -- The path to the output file:_files' \
'*::recipients -- The recipient's public key:' \
&& ret=0
;;
(decrypt)
_arguments "${_arguments_options[@]}" \
'--passphrase-file=[The path to read the passphrase from]: :_files' \
'-h[Prints help information]' \
'--help[Prints help information]' \
':secret-key -- The path of the encrypted secret key:_files' \
':key-id -- The ID of the public key:' \
':ciphertext -- The path to the input file:_files' \
':plaintext -- The path to the output file:_files' \
':sender -- The sender's public key:' \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" \
'--passphrase-file=[The path to read the passphrase from]: :_files' \
'-h[Prints help information]' \
'--help[Prints help information]' \
':secret-key -- The path of the encrypted secret key:_files' \
':key-id -- The ID of the public key to use:' \
':message -- The path to the message file:_files' \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
':public-key -- The signer's public key:' \
':message -- The path to the message file:_files' \
':signature -- The signature of the message:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_veil_commands] )) ||
_veil_commands() {
    local commands; commands=(
        "secret-key:Generate a new secret key." \
"public-key:Derive a public key from a secret key." \
"derive-key:Derive a public key from another public key." \
"encrypt:Encrypt a message for a set of recipients." \
"decrypt:Decrypt and verify a message." \
"sign:Sign a message." \
"verify:Verify a signature." \
"help:Prints this message or the help of the given subcommand(s)" \
    )
    _describe -t commands 'veil commands' commands "$@"
}
(( $+functions[_veil__decrypt_commands] )) ||
_veil__decrypt_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil decrypt commands' commands "$@"
}
(( $+functions[_veil__derive-key_commands] )) ||
_veil__derive-key_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil derive-key commands' commands "$@"
}
(( $+functions[_veil__encrypt_commands] )) ||
_veil__encrypt_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil encrypt commands' commands "$@"
}
(( $+functions[_veil__help_commands] )) ||
_veil__help_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil help commands' commands "$@"
}
(( $+functions[_veil__public-key_commands] )) ||
_veil__public-key_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil public-key commands' commands "$@"
}
(( $+functions[_veil__secret-key_commands] )) ||
_veil__secret-key_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil secret-key commands' commands "$@"
}
(( $+functions[_veil__sign_commands] )) ||
_veil__sign_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil sign commands' commands "$@"
}
(( $+functions[_veil__verify_commands] )) ||
_veil__verify_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'veil verify commands' commands "$@"
}

_veil "$@"